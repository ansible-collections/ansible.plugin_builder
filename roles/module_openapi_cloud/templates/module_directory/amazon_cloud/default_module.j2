{% include 'header.j2' %}


from ansible_collections.amazon.cloud.plugins.module_utils.core import AnsibleAmazonCloudModule
from ansible_collections.amazon.cloud.plugins.module_utils.core import CloudControlResource
from ansible_collections.amazon.cloud.plugins.module_utils.core import ansible_dict_to_boto3_tag_list
from ansible_collections.amazon.cloud.plugins.module_utils.core import scrub_none_parameters
from ansible_collections.amazon.cloud.plugins.module_utils.core import map_key_to_alias


def main():

    argument_spec = dict(
       state=dict(type='str', choices=['present', 'absent', 'list', 'describe', 'get'], default='present'),
    )
    {{arguments}}

    required_if = [
        {{ required_if|join(",") }}
    ]
    mutually_exclusive = [
        {{ mutually_exclusive|join(",") }}
    ]

    module = AnsibleAmazonCloudModule(argument_spec=argument_spec, required_if=required_if, mutually_exclusive=mutually_exclusive, supports_check_mode=True)
    cloud = CloudControlResource(module)

    {% set type_name=resource_type %}
    type_name = {{ type_name }}

    params = {}
    {{params}}

    {% if 'AWS::RDS::DBInstance' in type_name %}
    if module.params.get("engine") not in ("aurora", "aurora-postgresql", "aurora-mysql"):
        # It can only be used when engine is one of ("aurora", "aurora-postgresql", "aurora-mysql").
        # Since the CloudFormation template assigns 'default: 1', it is always set to 1.
        params.pop("promotion_tier")
    {% endif %}

    # The DesiredState we pass to AWS must be a JSONArray of non-null values
    _params_to_set = scrub_none_parameters(params)

    # Only if resource is taggable
    if module.params.get("tags") is not None:
        _params_to_set["tags"] = ansible_dict_to_boto3_tag_list(
            module.params["tags"]
        )

    # Use the alias from argument_spec as key and avoid snake_to_camel conversions
    params_to_set = map_key_to_alias(_params_to_set, argument_spec)

    # Ignore createOnlyProperties that can be set only during resource creation
    create_only_params = {{create_only_properties}}

    # Necessary to handle when module does not support all the states
    handlers = {{handlers}}

    state = module.params.get('state')
    identifier = {{primary_identifier}}
    {{ ensure_all_identifiers_defined }}
    results = {"changed": False, "result": {}}

    if state == "list":
        if "list" not in handlers:
            module.exit_json(**results, msg=f"Resource type {type_name} cannot be listed.")
        results["result"] = cloud.list_resources(type_name, identifier)

    if state in ("describe", "get"):
        if "read" not in handlers:
            module.exit_json(**results, msg=f"Resource type {type_name} cannot be read.")
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "present":
        results = cloud.present(type_name, identifier, params_to_set, create_only_params)

    if state == "absent":
        results["changed"] |= cloud.absent(type_name, identifier)

    module.exit_json(**results)


if __name__ == '__main__':
    main()
